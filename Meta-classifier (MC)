#Predictions
y_pred1 = classifier1.predict(X_test)

y_pred11 = classifier1.predict(X_validate)

model2= abs2.fit(X_train, Y_train)
y_pred6 = model2.predict(X_test)

model2= abs2.fit(X_train, Y_train)
y_pred66 = model2.predict(X_validate)

model100 = abc10.fit(X_train, Y_train)
y_pred1000 = model100.predict(X_test)

model100 = abc10.fit(X_train, Y_train)
y_pred100010 = model100.predict(X_validate)

#Train dataset for predictions
csv = pd.DataFrame(y_pred1)
csv.to_csv("Lasso.csv", index=False)

csv = pd.DataFrame(y_pred6)
csv.to_csv("GBM.csv", index=False)

csv = pd.DataFrame(y_pred1000)
csv.to_csv("AdaBoost.csv", index=False)

#Test dataset for predictions
csv = pd.DataFrame(y_pred11)
csv.to_csv("LassoV.csv", index=False)

csv = pd.DataFrame(y_pred66)
csv.to_csv("GBMV.csv", index=False)

csv = pd.DataFrame(y_pred100010)
csv.to_csv("AdaBoostV.csv", index=False)

#Making dataset from predictions
actual_y1 = test.iloc[:,0]
csv = pd.DataFrame(actual_y1)
csv.to_csv("AY1.csv", index=False)

actual_yV = validate.iloc[:,0]
csv = pd.DataFrame(actual_yV)
csv.to_csv("AYV.csv", index=False)

dfd1 = pd.read_csv("predictions.csv")
dfd1

prediction_x = dfd1.iloc[:,0:3]
prediction_y = dfd1.iloc[:,3]
PX_train, PX_test, PY_train, PY_test = train_test_split(prediction_x, prediction_y, test_size=0.30, random_state=123, stratify=prediction_y)

#Training of AdaBoost with predictions (meta classifier)
#Hyperparameter Tuning

# Initialize AdaBoost with a base estimator
base_estimator = DecisionTreeClassifier()  # you can change this to any other classifier
ada_boost = AdaBoostClassifier(base_estimator=base_estimator)

# Define the parameter grid
param_grid = {
    'n_estimators': [50, 100, 200],
    'learning_rate': [0.01, 0.1, 1.0],
    'base_estimator__max_depth': [1, 2, 3]  # parameters specific to the base estimator
}

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=ada_boost, param_grid=param_grid, cv=5, scoring='accuracy')

# Fit the model
grid_search.fit(X_train, y_train)

# Best parameters and score
print("Best parameters found: ", grid_search.best_params_)
print("Best cross-validation score: ", grid_search.best_score_)

from sklearn.ensemble import AdaBoostClassifier
AAA10 = AdaBoostClassifier(n_estimators=5, learning_rate=0.97, random_state=0)
MMM100 = AAA10.fit(PX_train, PY_train)
y_predFFF = MMM100.predict(PX_test)
